# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_protein.ipynb.

# %% auto 0
__all__ = ['AF_script', 'AF_display', 'pdbe_molstar']

# %% ../nbs/05_protein.ipynb 3
from fasthtml.common import *
from fasthtml.jupyter import *

from .core import *
from .static import *

import json
import pandas as pd

# %% ../nbs/05_protein.ipynb 4
def AF_display():
    "client side scripts"
    return Script(src="./imports/alphafold_display.js")

# %% ../nbs/05_protein.ipynb 5
def pdbe_molstar():
    "Headers"
    s1 = Link(rel='stylesheet', type='text/css', href='https://cdn.jsdelivr.net/npm/pdbe-molstar@3.2.0/build/pdbe-molstar-light.css')
    s2 = Script(type='text/javascript', src='https://cdn.jsdelivr.net/npm/pdbe-molstar@3.2.0/build/pdbe-molstar-plugin.js')
    s3 = Style(
        '''
          #myViewer {
            float: left;
            width: 100%;
            height: 600px;
            position: relative;
            margin: 0px;
          }
          .msp-plugin ::-webkit-scrollbar-thumb {
            background-color: #474748 !important;
            border-radius: 10px;
          }
          .msp-right-panel { 
            display: none !important; 
          }
          #protein-form {
            margin: 20px;
          }
          
        '''
    )
    return [s1, s2, s3]

# %% ../nbs/05_protein.ipynb 15
AF_script = Script(
    '''
// Global state variables
let isAlphaFoldView = false;
let currentProteinId = null;
let currentSiteData = null;

// Function to load protein
function loadProtein(proteinId, siteData) {
  // Create a new plugin instance each time the function is called
  const viewerInstance = new PDBeMolstarPlugin();

  // Set options with dynamic alphafoldView
  const options = {
    customData: {
      url: `https://alphafold.ebi.ac.uk/files/AF-${proteinId}-F1-model_v1.cif`,
      format: 'cif',
    },
    alphafoldView: isAlphaFoldView,  // Use the dynamic state variable here
    bgColor: { r: 255, g: 255, b: 255 },
    hideCanvasControls: [
      'animation',
      'controlToggle',
      'controlInfo',
      'expand',
      'selection',
      'orientation',
      'zoom',
    ],
    sequencePanel: true,
    hideControls: false,
    landscape: true,
  };

  // Get element from HTML/Template to place the viewer
  const viewerContainer = document.getElementById('myViewer');

  // Render the new instance
  viewerInstance.render(viewerContainer, options);

  // Add tooltips for AM_pathogenicity scores
  viewerInstance.events.loadComplete.subscribe(() => {
    const tooltipData = siteData.map(site => {
      const tooltipContent = Object.keys(site).map(key => {
        return `${key}: ${site[key] || 'N/A'}`;
      }).join('<br>');
      return {
        residue_number: site.residue,
        tooltip: tooltipContent,
        color: { r: 255, g: 0, b: 150 },
      };
    });

    viewerInstance.visual.select({ data: tooltipData });
    viewerInstance.visual.tooltips({ data: tooltipData });
  });
}

// Toggle alphafoldView on button click
document.getElementById('AF_view').addEventListener('click', function() {
  // Toggle the value of isAlphaFoldView
  isAlphaFoldView = !isAlphaFoldView;

  // Reload the viewer with the current protein data if available
  if (currentProteinId && currentSiteData) {
    loadProtein(currentProteinId, currentSiteData);
  }
});

// Add event listener to the load protein button
document.addEventListener('DOMContentLoaded', function() {
  const loadButton = document.getElementById('load-protein-btn');
  const proteinInput = document.getElementById('uniprot_id');

  loadButton.addEventListener('click', function() {
    const proteinId = proteinInput.value.trim();
    if (proteinId) {
      fetch(`./api/protein/${proteinId}`)
        .then(response => response.json())
        .then(data => {
          if (data.error) {
            alert(data.error);
          } else {
            // Save the current protein data
            currentProteinId = proteinId;
            currentSiteData = data.site_data;
            loadProtein(proteinId, data.site_data);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('An error occurred while fetching protein data');
        });
    } else {
      alert('Please enter a valid Protein ID');
    }
  });

  // Load a default protein on page load
  fetch('./api/protein/P35222')
    .then(response => response.json())
    .then(data => {
      if (!data.error) {
        // Save the default protein data
        currentProteinId = 'P35222';
        currentSiteData = data.site_data;
        loadProtein('P35222', data.site_data);
      }
    });
});

    '''
)
