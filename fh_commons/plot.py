# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_plot_and_table.ipynb.

# %% auto 0
__all__ = ['fh_svg', 'plot_heatmap', 'plot_bar', 'download_svg', 'download_table', 'send_df', 'download_df', 'dynamic_table']

# %% ../nbs/03_plot_and_table.ipynb 3
from fasthtml.common import *
from fasthtml.jupyter import *
import pandas as pd

from .core import *
from .static import *
import json

import numpy as np, pandas as pd, seaborn as sns
from matplotlib import pyplot as plt

# %% ../nbs/03_plot_and_table.ipynb 9
def fh_svg(func):
    "svg to fasthtml item"
    def wrapper(*args, **kwargs):
        func(*args, **kwargs)

        f = io.StringIO()
        plt.savefig(f, format='svg', bbox_inches='tight')

        f.seek(0)
        svg_data = f.getvalue()
        plt.close()

        return NotStr(svg_data)
    return wrapper

# %% ../nbs/03_plot_and_table.ipynb 12
@fh_svg
def plot_heatmap(df, # a matrix of values
     title: str='heatmap', # title of the heatmap
     # figsize: tuple=(4.5,6), # figure size of the heatmap (6,7)
     cmap: str='coolwarm', # color map, default is dark&white
     **kwargs, # arguments for sns.heatmap()
     ):

    "Plot heatmap based on a matrix of values"

    # plt.figure(figsize=figsize)
    sns.heatmap(df, cmap=cmap, center=0, square=True,annot=False,**kwargs)
    # plt.axvline(len(df.columns)//2,color='black', linewidth=0.5)
    plt.ylabel('')
    plt.title(title)

# %% ../nbs/03_plot_and_table.ipynb 16
@fh_svg
def plot_bar(df,title='Bar plot',figsize=(4,4)):
    df.plot.barh(legend=False,figsize=figsize)
    plt.xlabel('Score')
    plt.ylabel('')
    plt.title(title)

# %% ../nbs/03_plot_and_table.ipynb 20
def download_svg( *args, txt=' Plot',**kwargs):
    return download_button(txt, *args, onclick='downloadSVG(this)',**kwargs)

# %% ../nbs/03_plot_and_table.ipynb 26
def download_table(*args, **kwargs):
    return download_button(*args, onclick='downloadTableAsCSV(this)',**kwargs)

# %% ../nbs/03_plot_and_table.ipynb 31
def send_df(df,fname, href, button=download_button(' Data')):
    json_data = df.to_json(orient='records')
    return Form(
        Hidden(value=json_data,id='dataframe'),
        Hidden(value=fname,id='fname'),
        button,
        method='post',
        action=href,
        style='display:inline;')

# %% ../nbs/03_plot_and_table.ipynb 32
def download_df(dataframe,fname):
    data_dict = json.loads(dataframe)
    df = pd.DataFrame(data_dict)
    csv_string = df.to_csv(index=False)

    headers = {
        'Content-Disposition': f'attachment; filename="{fname}.csv"'
    }
    return Response(csv_string, media_type='text/csv', headers=headers)

# %% ../nbs/03_plot_and_table.ipynb 37
def dynamic_table(df,id='dynamic_table', cls='table table-striped',):
    "Dynamic data tables; make new id names if multiple tables"
    script = Script(f"new DataTable('#{id}')")
    return df2html(df,cls=cls,id=id),script
