# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_static.ipynb.

# %% auto 0
__all__ = ['blank', 'border', 'df2html', 'format_input', 'Pico', 'Pico_Titled', 'get_nav', 'NavTitled', 'get_tab',
           'get_accordian', 'download_button', 'get_card']

# %% ../nbs/01_static.ipynb 3
from fasthtml.common import *
from fasthtml.jupyter import *
import pandas as pd
from .core import *

# %% ../nbs/01_static.ipynb 7
def blank(height=50):
  return Div(style=f'height:{height}px')

# %% ../nbs/01_static.ipynb 11
def border(height=None):
    style = f'height:{height}px' if height else ''
    return Div(cls='border-bottom', style=style)

# %% ../nbs/01_static.ipynb 14
def df2html(df,cls='table table-striped',id = None,**kwargs):
    "bootstrap striped tables"
    return NotStr(df.to_html(index=False,border=0,classes=cls,justify='left',table_id=id,**kwargs))

# %% ../nbs/01_static.ipynb 18
def format_input(txt,upper=True):
    return txt.replace(" ", "").upper() if upper else txt.replace(" ", "")

# %% ../nbs/01_static.ipynb 21
def Pico(*args,cls='pico',**kwargs):
    "Pico conditional Div"
    return Div(*args,cls=cls,**kwargs)

# %% ../nbs/01_static.ipynb 24
def Pico_Titled(title, *args,cls="container",**kwargs):
    "Pico titled with everything else unPico"
    return Title(title), Main(Pico(H2(title)), *args, cls=cls, **kwargs)

# %% ../nbs/01_static.ipynb 27
def get_nav(title,href='#'):
    return Nav(
        Div(
            A(title, href=href, cls='navbar-brand'),
            cls='container-fluid'),
        cls='navbar bg-body-tertiary')

# %% ../nbs/01_static.ipynb 30
def NavTitled(navbar, title, *args,cls="container", **kwargs):
    "Navbar + Pico titled with everything else unPico"
    return Title(title), Main(navbar,Div(blank(30),Pico(H2(title)), *args, cls=cls), **kwargs)

# %% ../nbs/01_static.ipynb 33
def get_tab(data_dict, prefix=''):
    """Create a bootstrap tab structure with optional prefix for unique IDs and handle spaces in tab names"""
    lis = []
    divs = []
    for i, (tab_name, tab_content) in enumerate(data_dict.items()):
        # Replace spaces with hyphens and remove any non-alphanumeric characters for the ID
        safe_name = ''.join(c if c.isalnum() or c in '-_' else '-' for c in tab_name.lower()).strip('-')
        unique_id = f"{prefix}-{safe_name}" if prefix else safe_name

        # tab
        li = Li(
            Button(tab_name,  # Use original tab_name for display
                   id=f'{unique_id}-tab', 
                   data_bs_toggle='tab', 
                   data_bs_target=f'#{unique_id}-tab-pane', 
                   type='button', 
                   role='tab', 
                   aria_controls=f'{unique_id}-tab-pane', 
                   aria_selected='true' if i==0 else 'false', 
                   cls='nav-link active' if i==0 else 'nav-link'),
            role='presentation',
            cls='nav-item',
            style='list-style: none'
        )
        lis.append(li)

        # tab content
        div = Div(blank(15),tab_content, 
                  id=f'{unique_id}-tab-pane', 
                  role='tabpanel', 
                  aria_labelledby=f'{unique_id}-tab', 
                  tabindex='0', 
                  cls='tab-pane fade show active' if i == 0 else 'tab-pane fade')
        divs.append(div)

    tab = Ul(*lis, id=f'{prefix}-myTab' if prefix else 'myTab', role='tablist', cls='nav nav-tabs')
    content = Div(*divs, id=f'{prefix}-myTabContent' if prefix else 'myTabContent', cls='tab-content')

    return Div(tab, content, cls='tab-container')

# %% ../nbs/01_static.ipynb 36
def get_accordian(data_dict):
    "Bootstrap accordian"
    accordians=[]
    for i, (accordion_title,accordion_content) in enumerate(data_dict.items()):
        accordian = Div(
            H2(
                Button(accordion_title, type='button', data_bs_toggle='collapse', data_bs_target=f'#collapse{i}', aria_expanded='false', aria_controls=f'collapse{i}', cls='accordion-button collapsed'),
                cls='accordion-header'
            ),
            Div(
                Div(
                    accordion_content,
                    cls='accordion-body',
                ),
                id=f'collapse{i}',
                data_bs_parent='#accordionExample',
                cls='accordion-collapse collapse'
            ),
            cls='accordion-item')
        accordians.append(accordian)
    return Div(*accordians, id='accordionExample', cls='accordion')

# %% ../nbs/01_static.ipynb 39
def download_button(*args, **kwargs):
    return Button(
          I(cls='bi bi-download'),
          *args,
          cls='btn btn-outline-secondary btn-sm',
          **kwargs)

# %% ../nbs/01_static.ipynb 42
def get_card(img_pth,title,description,link="#",img_height=200,txt_height=150,card_width=22):
    "Card with link; make sure outside Div has cls = 'row'"

    img = Div(
        Img(src=img_pth, loading='lazy',cls='card-img-top'),
        style=f"height: {img_height}px; overflow: hidden;", #image size
    )
    txt = Div(
        H5(title, cls="card-title"),
        P(description, cls='card-text text-muted'), # text-muted make the text looks gray
        cls='card-body',
        style=f"height: {txt_height}px;", # text size
    )
    card = Div(img,txt,style=f'width: {card_width}rem;',cls='card')

    # grid arrange the card, and add link
    card_arrange = Div(card,
                       A(href=link, cls='stretched-link'),
                       # p-3 is for padding margin, make sure outside cls='row'
                       cls='col-xs-12 col-sm-6 col-md-6 col-lg-4 p-3',
                       # amplify the card when mouse over it
                       style="transform: rotate(0); transition: transform 0.3s ease;",
                       onmouseover="this.style.transform='scale(1.05)';",
                       onmouseout="this.style.transform='scale(1)';") 

    return card_arrange
