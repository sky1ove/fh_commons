# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_basic.ipynb.

# %% auto 0
__all__ = ['Tooltip', 'Helptip', 'df2html', 'download_table', 'send_df', 'download_df', 'dynamic_table', 'get_pagination',
           'get_page_index', 'modal_content', 'modal_form', 'modal_link', 'get_spinner']

# %% ../nbs/02_basic.ipynb 3
from fasthtml.common import *
from fasthtml.jupyter import *

from .core import *
from .static import *

import json
import pandas as pd
from math import ceil

# %% ../nbs/02_basic.ipynb 29
def Tooltip(tooltip_content, # FT or str
            trigger_content, 
            element="span", 
            **kwargs):
    "Create a Bootstrap tooltip"
    
    # Convert tooltip content using to_xml() if it's an FT element, otherwise use directly
    tooltip_content = tooltip_content if isinstance(tooltip_content, str) else to_xml(tooltip_content)
    
    return ft(element,
                trigger_content,
                data_bs_toggle='tooltip', 
                data_bs_placement='right', 
              data_bs_custom_class='custom-tooltip', 
              data_bs_title=tooltip_content,
              data_bs_html='true',# Enable HTML content in tooltip
                **kwargs)

# %% ../nbs/02_basic.ipynb 32
def Helptip(tooltip_text=" ", # FT or str
            trigger_content=I(cls="bi bi-question-circle-fill") , 
            **kwargs):
    "Create a Bootstrap tooltip with help icon as default"

    return Tooltip(tooltip_text,trigger_content,style="margin-left: 4px;",)

# %% ../nbs/02_basic.ipynb 37
def df2html(df, 
             tooltips=None, # dict
             cls='table table-striped', 
             id=None, 
             **kwargs):
    """Create an HTML table with Bootstrap styling and tooltips"""
    # First create regular HTML table
    html = df.to_html(
        index=False,
        border=0,
        classes=cls,
        justify='left',
        table_id=id,
        escape=True,
        **kwargs)

    if tooltips:
        # Replace the header cells with tooltip versions
        for col, tooltip in tooltips.items():
            # Find the header cell containing this column name
            pattern = f'<th>({col})</th>'
            
            # Create the new header with tooltip - fixed HTML structure
            # \\1 preserves the original col name
            new_header = f'''<th>\\1 {to_xml(Helptip(tooltip))}</th>'''
            
            # Replace in HTML
            html = re.sub(pattern, new_header, html)

    return NotStr(html)

# %% ../nbs/02_basic.ipynb 38
def download_table(*args, **kwargs):
    "Enable table download through a download button"
    return download_button(*args, onclick='downloadTableAsCSV(this)',**kwargs)

# %% ../nbs/02_basic.ipynb 43
def send_df(df,fname, href, button=download_button(' Data')):
    json_data = df.to_json(orient='records')
    return Form(
        Hidden(value=json_data,id='dataframe'),
        Hidden(value=fname,id='fname'),
        button,
        method='post',
        action=href,
        style='display:inline;')

# %% ../nbs/02_basic.ipynb 44
def download_df(dataframe,fname):
    data_dict = json.loads(dataframe)
    df = pd.DataFrame(data_dict)
    csv_string = df.to_csv(index=False)

    headers = {
        'Content-Disposition': f'attachment; filename="{fname}"'
    }
    return Response(csv_string, media_type='text/csv', headers=headers)

# %% ../nbs/02_basic.ipynb 48
def dynamic_table(df,id='dynamic_table', cls='table table-striped',):
    "Dynamic data tables; make new id names if multiple tables"
    script = Script(f"new DataTable('#{id}')")
    return df2html(df,cls=cls,id=id),script

# %% ../nbs/02_basic.ipynb 54
def get_pagination(page,total_pages,routes):
    "Bootstrap-styled pagination with integrated page jump form"
    return Nav(
        Ul(
            Li(A("Previous", href=f"{routes}?page={page-1}" if page > 1 else "#", 
                 cls="page-link" + (" disabled" if page <= 1 else "")), 
               cls="page-item"),
            Li(Span(f"Page {page} of {total_pages}", cls="page-link"), cls="page-item active"),
            Li(A("Next", href=f"{routes}?page={page+1}" if page < total_pages else "#", 
                 cls="page-link" + (" disabled" if page >= total_pages else "")), 
               cls="page-item"),
            Li(
                Form(
                    Input(type="number", name="page", placeholder="Page", min="1", max=str(total_pages), 
                          cls="form-control", style="width: 100px; display: inline-block;"),
                    Button("Go", type="submit", cls="btn btn-primary"),
                    cls="d-flex align-items-center m-2 g-2",
                    method="get",
                    action=routes
                ),
                cls="page-item"
            ),
            cls="pagination justify-content-center align-items-center"
        ),
        aria_label="Page navigation"
    )

# %% ../nbs/02_basic.ipynb 58
def get_page_index(current_page, total_items, items_per_page=12):
    "Get start index and end index given the current page number"
    
    total_pages = ceil(total_items / items_per_page) #ceil returns integer number, ceil(4.2) --> 5
    
    page = max(1, min(current_page, total_pages))  # Ensure page is within valid range
    
    start_index = (current_page - 1) * items_per_page
    end_index = start_index + items_per_page
    
    return start_index, end_index,total_pages

# %% ../nbs/02_basic.ipynb 67
def modal_content(title, *args):
    return Div(
        Div(
            Div(
                H1(title, cls='modal-title fs-5'),
                Button(type='button', data_bs_dismiss='modal', aria_label='Close', cls='btn-close'),
                cls='modal-header'
            ),
            Div(*args, cls='modal-body'),
            cls='modal-content'
        ),
        cls='modal-dialog modal-xl'
    )

# %% ../nbs/02_basic.ipynb 71
def modal_form(*form_content,post, btn_text='Search',cls=None,target_id='modals-window'):
    "Reference: https://htmx.org/examples/modal-bootstrap/"
    modal_button = Form(*form_content, # Input(type='text',id='ssss')
                        Div(
                            Button(btn_text,cls='btn btn-primary py-3'),
                            data_bs_toggle='modal', 
                            data_bs_target=f'#{target_id}'),
                        post=post, 
                        target_id=target_id, 
                        hx_trigger='submit', 
                        cls=cls)

    modal_content =Div(
        Div(
            Div(cls='modal-content'),
            role='document',
            cls='modal-dialog modal-lg modal-dialog-centered'
        ),
        id=target_id,
        style='display: none',
        aria_hidden='false',
        tabindex='-1',
        cls='modal modal-blur fade'
    )
    return modal_button, modal_content

# %% ../nbs/02_basic.ipynb 75
def modal_link(text,post,cls=None,target_id='modals-window'):
    "Reference: https://htmx.org/examples/modal-bootstrap/"
    modal_button = A(text,
                     data_bs_toggle='modal', 
                     data_bs_target=f'#{target_id}',
                     post=post, 
                     target_id=target_id, 
                     cls=cls)

    modal_content =Div(
        Div(
            Div(cls='modal-content'),
            role='document',
            cls='modal-dialog modal-lg modal-dialog-centered'
        ),
        id=target_id,
        style='display: none',
        aria_hidden='false',
        tabindex='-1',
        cls='modal modal-blur fade'
    )
    return modal_button, modal_content

# %% ../nbs/02_basic.ipynb 79
def modal_content(title, *args):
    return Div(
        Div(
            Div(
                H1(title, cls='modal-title fs-5'),
                Button(type='button', data_bs_dismiss='modal', aria_label='Close', cls='btn-close'),
                cls='modal-header'
            ),
            Div(*args, cls='modal-body'),
            cls='modal-content'
        ),
        cls='modal-dialog modal-xl'
    )

# %% ../nbs/02_basic.ipynb 83
def modal_form(*form_content,post, btn_text='Search',cls=None,target_id='modals-window'):
    "Reference: https://htmx.org/examples/modal-bootstrap/"
    modal_button = Form(*form_content, # Input(type='text',id='ssss')
                        Div(
                            Button(btn_text,cls='btn btn-primary py-3'),
                            data_bs_toggle='modal', 
                            data_bs_target=f'#{target_id}'),
                        post=post, 
                        target_id=target_id, 
                        hx_trigger='submit', 
                        cls=cls)

    modal_content =Div(
        Div(
            Div(cls='modal-content'),
            role='document',
            cls='modal-dialog modal-lg modal-dialog-centered'
        ),
        id=target_id,
        style='display: none',
        aria_hidden='false',
        tabindex='-1',
        cls='modal modal-blur fade'
    )
    return modal_button, modal_content

# %% ../nbs/02_basic.ipynb 87
def modal_link(text,post,cls=None,target_id='modals-window'):
    "Reference: https://htmx.org/examples/modal-bootstrap/"
    modal_button = A(text,
                     data_bs_toggle='modal', 
                     data_bs_target=f'#{target_id}',
                     post=post, 
                     target_id=target_id, 
                     cls=cls)

    modal_content =Div(
        Div(
            Div(cls='modal-content'),
            role='document',
            cls='modal-dialog modal-lg modal-dialog-centered'
        ),
        id=target_id,
        style='display: none',
        aria_hidden='false',
        tabindex='-1',
        cls='modal modal-blur fade'
    )
    return modal_button, modal_content

# %% ../nbs/02_basic.ipynb 90
def get_spinner(id, cls='d-flex justify-content-center'):
    return Div(Div(
        Span('Loading...', cls='visually-hidden'),
        role='status',
        cls='htmx-indicator spinner-border',
        id=id,
    ),cls=cls)
